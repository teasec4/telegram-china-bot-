import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, ConversationHandler, ContextTypes, CallbackQueryHandler
)
from warnings import filterwarnings
from telegram.warnings import PTBUserWarning
import logging
from config import BOT_TOKEN
from db import Database
from services.request_service import RequestService

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

START, DESCRIPTION, CONTACT = range(3)

REPLIES = {
    "welcome": (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–ú—ã –ø–æ–º–æ–≥–∞–µ–º –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –≤ –ö–∏—Ç–∞–µ. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É."
    ),
    "ask_description": "üìù –û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤—ã –∏—â–µ—Ç–µ.",
    "ask_contact": "üìû –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏.",
    "thanks": "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.",
    "already_requested" : "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!\n/delete - —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É.\n/help - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.",
    "help": (
        "/start ‚Äì –Ω–∞—á–∞—Ç—å\n"
        "/cancel ‚Äì –æ—Ç–º–µ–Ω–∏—Ç—å –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è\n"
        "/help ‚Äì –ø–æ–º–æ—â—å \n"
        "/delete - —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ–ª–Ω–æ—Å—Ç—å—é"
    ),
    "no_request":"–£ –í–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏.",
    "deleted": "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
    "cancelled": "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start."
}

db = Database()
request_service = None  # to be initialized in main()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = int(update.effective_user.id)
    logging.info(f"User {user_id} has_request: {bool(user_id)}")
    if db.user_has_request(user_id):
        keyboard =[[InlineKeyboardButton("–ú–æ—è –∑–∞—è–≤–∫–∞", callback_data="view_request")]]
        await update.message.reply_text(REPLIES["already_requested"], reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        keyboard = [[InlineKeyboardButton("üì® –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="start_request")]]
        await update.message.reply_text(REPLIES["welcome"], reply_markup=InlineKeyboardMarkup(keyboard))
        return ConversationHandler.END

    return START

async def handle_start_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = int(query.from_user.id)
    if db.user_has_request(user_id):
        await query.answer(REPLIES['already_requested'], show_alert=True)
        return ConversationHandler.END
    
    await query.answer()
    await query.message.reply_text(REPLIES["ask_description"])
    return DESCRIPTION

async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if len(text)<5:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤).")
        return DESCRIPTION
    context.user_data["description"] = text
    await update.message.reply_text(REPLIES["ask_contact"])
    return CONTACT

async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.text.strip()
    if len(contact) < 3:
        await update.message.reply_text("‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.")
        return CONTACT
    context.user_data["contact"] = contact
    description = context.user_data.get("description")
    user_id = int(update.effective_user.id)

    success = await request_service.create_request(user_id, description, contact)
    if not success:
        await update.message.reply_text(REPLIES['already_requested'])
    else:
        await update.message.reply_text(REPLIES["thanks"])

    return ConversationHandler.END

async def view_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = int(query.from_user.id)
    logging.info(f"View request called by user {user_id}")
    request = db.get_request_by_user(user_id)
    if request:
        description, contact = request
        message = (
            f"üìÑ*–í–∞—à–∞ –∑–∞—è–≤–∫–∞*\n\n"
            f"üì¶*–û–ø–∏—Å–∞–Ω–∏–µ* {description}\n"
            f"üìû*–ö–æ–Ω—Ç–∞–∫—Ç* {contact}\n"
        )
        keyboard = [[InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data='delete_request')]]
        await query.message.reply_text(message, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    else:
        await query.message.reply_text(REPLIES['no_request'])

async def delete_request(update:Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = int(query.from_user.id)

    db.delete_request(user_id)
    await query.message.reply_text(REPLIES['deleted'])

async def delete_command(update:Update, context:ContextTypes.DEFAULT_TYPE):
    user_id = int(update._effective_user.id)
    if db.user_has_request(user_id):
        db.delete_request(user_id)
        await update.message.reply_text(REPLIES['deleted'])
    else:
        await update.message.reply_text(REPLIES['no_request'])

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(REPLIES["cancelled"])
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(REPLIES["help"])

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.")

async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    await update.message.reply_text(f"üÜî Chat ID: `{chat.id}`", parse_mode="Markdown")

def main():
    global request_service

    filterwarnings(action="ignore", message=r".*CallbackQueryHandler", category=PTBUserWarning)
    application = Application.builder().token(BOT_TOKEN).build()

    global db
    request_service = RequestService(db, application.bot)

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_start_button, pattern="^start_request$")],
        states={
            START: [CallbackQueryHandler(handle_start_button, pattern="^start_request$")],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
            CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_contact)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("delete", delete_command))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(view_request, pattern="^view_request$"))
    application.add_handler(CallbackQueryHandler(delete_request, pattern="^delete_request$"))
    application.add_handler(CommandHandler("chatid", get_chat_id))
    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))
    

    print("Bot is running...")
    application.run_polling()

if __name__ == "__main__":
    main()